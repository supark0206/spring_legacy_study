<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 빈을 정리하는 곳  -->
	<!-- 빈을 정리하는 곳  -->
	<!-- 서블릿의 요청에 대한 프로세싱을 구성한다 -->
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- 컨트롤러를 어노테이션을 통해 지정해준다 -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- 이미지등을 이 위치에 넣으면 공용으로 사용할수있다 / 자원 관리를 해준다 -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- 뷰의 결과들은 컨트롤러에 의해서 랜더링 요청이 들어오면 /WEB-INF/views 의 파일들을 뿌려준다.   -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- prefix 와 suffix 를 이용하여 나누어준다  -->
		<!-- prefix 파일경로 , suffix 파일 종류  이후 prefix + 파일명 + suffix 로 합쳐서 경로를 호출한다 -->
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.spring.ex" />
	
	
	
</beans:beans>
